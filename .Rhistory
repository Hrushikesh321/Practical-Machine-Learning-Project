knitr::opts_chunk$set(echo = TRUE,cache.path = '.cache/', fig.path = 'fig/',dpi = 100)
source <- 'http://groupware.les.inf.puc-rio.br/har'
Ori_training <- read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'))
Ori_testing <- read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'))
write.csv(Ori_training,'./data/pml-training.csv'); rm(Ori_training)
write.csv(Ori_testing,'./data/pml-testing.csv');rm(Ori_testing)
train_in <- read.csv('./data/pml-training.csv', header=T)[,-c(1:8)]
valid_in <- read.csv('./data/pml-testing.csv', header=T)[,-c(1:8)]
# Data partitioning:
trainData <- train_in[, colSums(is.na(train_in)) == 0]
validData <- valid_in[, colSums(is.na(valid_in)) == 0]
set.seed(1234)
inTrain <- createDataPartition(trainData$classe, p = 0.7, list = FALSE)
knitr::opts_chunk$set(echo = TRUE,cache.path = '.cache/', fig.path = 'fig/',dpi = 100)
source <- 'http://groupware.les.inf.puc-rio.br/har'
Ori_training <- read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'))
Ori_testing <- read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'))
write.csv(Ori_training,'./data/pml-training.csv'); rm(Ori_training)
write.csv(Ori_testing,'./data/pml-testing.csv');rm(Ori_testing)
train_in <- read.csv('./data/pml-training.csv', header=T)[,-c(1:8)]
valid_in <- read.csv('./data/pml-testing.csv', header=T)[,-c(1:8)]
# Data partitioning:
trainData <- train_in[, colSums(is.na(train_in)) == 0]
validData <- valid_in[, colSums(is.na(valid_in)) == 0]
set.seed(1234)
inTrain <- CreateDataPartition(trainData$classe, p = 0.7, list = FALSE)
# Data partitioning:
trainData <- train_in[, colSums(is.na(train_in)) == 0]
validData <- valid_in[, colSums(is.na(valid_in)) == 0]
set.seed(1234)
inTrain <- createDataPartition(trainData$classe, p = 0.7, list = FALSE)
library(caret)
knitr::opts_chunk$set(echo = TRUE,cache.path = '.cache/', fig.path = 'fig/',dpi = 100)
source <- 'http://groupware.les.inf.puc-rio.br/har'
Ori_training <- read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'))
Ori_testing <- read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'))
write.csv(Ori_training,'./data/pml-training.csv'); rm(Ori_training)
write.csv(Ori_testing,'./data/pml-testing.csv');rm(Ori_testing)
train_in <- read.csv('./data/pml-training.csv', header=T)[,-c(1:8)]
valid_in <- read.csv('./data/pml-testing.csv', header=T)[,-c(1:8)]
# Data partitioning:
trainData <- train_in[, colSums(is.na(train_in)) == 0]
validData <- valid_in[, colSums(is.na(valid_in)) == 0]
set.seed(1234)
inTrain <- createDataPartition(trainData$classe, p = 0.7, list = FALSE)
trainData <- trainData[inTrain, ]
testData <- trainData[-inTrain, ]
# remove near zero value
NZV <- nearZeroVar(trainData)
trainData <- trainData[, -NZV]
testData  <- testData[, -NZV]
dim(trainData)
dim(testData)
library(corrplot)
cor_mat <- cor(trainData[, -53])
corrplot(cor_mat, order = "FPC", method = "color", type = "upper",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
highlyCorrelated = findCorrelation(cor_mat, cutoff=0.75)
names(trainData)[highlyCorrelated]
control <- trainControl(method="cv", number=3, verboseIter=F)
set.seed(12345)
library(rpart)
library(rpart.plot)
library(rattle)
decisionTreeMod1 <- train(classe ~ ., data=trainData, trControl = control, method="rpart", tuneLength = 5)
fancyRpartPlot(decisionTreeMod1$finalModel)
predictTreeMod1 <- predict(decisionTreeMod1, testData)
cmtree <- confusionMatrix(predictTreeMod1, factor(testData$classe))
cmtree
# plot matrix results
plot(cmtree$table, col = cmtree$byClass,
# main = paste("Decision Tree - Accuracy =", round(cmtree$overall['Accuracy'], 4))
main=bquote(paste("Decision Tree - Accuracy", NULL%~~%NULL,
.(round(cmtree$overall['Accuracy'], 4))))
)
library(randomForest)
modRF1 <- randomForest(as.factor(classe) ~ ., data = trainData, importance=TRUE)
predictRF1 <- predict(modRF1, newdata=testData)
cmrf <- confusionMatrix(predictRF1, factor(testData$classe))
cmrf
plot(modRF1)
plot(cmrf$table, col = cmrf$byClass,
main=bquote(paste("Random Forest Confusion Matrix: Accuracy", NULL%~~%NULL,
.(round(cmrf$overall['Accuracy'],4))))
)
mod_svm <- train(classe~., data=trainData, method="svmLinear", trControl = control, tuneLength = 5, verbose = F)
pred_svm <- predict(mod_svm, testData)
cmsvm <- confusionMatrix(pred_svm, factor(testData$classe))
cmsvm
Results <- predict(modRF1, newdata=validData)
Results
detach("package:lattice", unload = TRUE)
library(lattice)
detach("package:caret", unload = TRUE)
library(caret)
# Data partitioning:
trainData <- train_in[, colSums(is.na(train_in)) == 0]
validData <- valid_in[, colSums(is.na(valid_in)) == 0]
set.seed(1234)
inTrain <- createDataPartition(trainData$classe, p = 0.7, list = FALSE)
trainData <- trainData[inTrain, ]
testData <- trainData[-inTrain, ]
# remove near zero value
NZV <- nearZeroVar(trainData)
trainData <- trainData[, -NZV]
testData  <- testData[, -NZV]
dim(trainData)
dim(testData)
